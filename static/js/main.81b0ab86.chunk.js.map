{"version":3,"sources":["Store/actions.js","App.js","Store/reducers.js","index.js"],"names":["changeLocation","location","type","setSelectedDate","date","setSelectedTemp","temp","fetchData","url","dispatch","xhr","err","data","body","JSON","parse","list","dates","temps","i","length","push","dt_txt","main","setData","setDates","setTemps","App","evt","preventDefault","encodeURIComponent","props","redux","get","onPlotClick","points","number","pointNumber","getIn","target","value","currentTemp","this","onSubmit","placeholder","onChange","className","x","toJS","y","config","displayModeBar","onClick","layout","margin","t","r","l","xaxis","gridcolor","React","Component","connect","state","initialState","fromJS","selected","store","createStore","action","set","setIn","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81b0ab86.chunk.js","sourcesContent":["import xhr from \"xhr\";\n\nexport function changeLocation(location) {\n  return {\n    type: \"CHANGE_LOCATION\",\n    location: location\n  };\n}\n\nexport function setSelectedDate(date) {\n  return {\n    type: \"SET_SELECTED_DATE\",\n    date: date\n  };\n}\n\nexport function setSelectedTemp(temp) {\n  return {\n    type: \"SET_SELECTED_TEMP\",\n    temp: temp\n  };\n}\n\nexport function setData(data) {\n  return {\n    type: \"SET_DATA\",\n    data: data\n  };\n}\n\nexport function setDates(dates) {\n  return {\n    type: \"SET_DATES\",\n    dates: dates\n  };\n}\n\nexport function setTemps(temps) {\n  return {\n    type: \"SET_TEMPS\",\n    temps: temps\n  };\n}\n\nexport function fetchData(url) {\n  return function thunk(dispatch) {\n    xhr(\n      {\n        url: url\n      },\n      function(err, data) {\n        var body = JSON.parse(data.body);\n        var list = body.list;\n        var dates = [];\n        var temps = [];\n        for (var i = 0; i < list.length; i++) {\n          dates.push(list[i].dt_txt);\n          temps.push(list[i].main.temp);\n        }\n\n        dispatch(setData(body));\n        dispatch(setDates(dates));\n        dispatch(setTemps(temps));\n        dispatch(setSelectedDate(\"\"));\n        dispatch(setSelectedTemp(null));\n      }\n    );\n  };\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\nimport Plot from \"react-plotly.js\";\nimport { toJS } from \"immutable\";\n\nimport {\n  changeLocation,\n  fetchData,\n  setSelectedDate,\n  setSelectedTemp\n} from \"./Store/actions\";\n\nexport class App extends React.Component {\n  fetchData = evt => {\n    evt.preventDefault();\n\n    var location = encodeURIComponent(this.props.redux.get(\"location\"));\n\n    var urlPrefix = \"https://api.openweathermap.org/data/2.5/forecast?q=\";\n    var urlSuffix = \"&APPID=448fecc9c76929751cc27c9ae298fde6&units=metric\";\n    var url = urlPrefix + location + urlSuffix;\n\n    this.props.dispatch(fetchData(url));\n  };\n\n  onPlotClick = data => {\n    if (data.points) {\n      var number = data.points[0].pointNumber;\n      this.props.dispatch(\n        setSelectedDate(this.props.redux.getIn([\"dates\", number]))\n      );\n      this.props.dispatch(\n        setSelectedTemp(this.props.redux.getIn([\"temps\", number]))\n      );\n    }\n  };\n\n  changeLocation = evt => {\n    this.props.dispatch(changeLocation(evt.target.value));\n  };\n\n  render() {\n    var currentTemp = \"not loaded yet\";\n    if (this.props.redux.getIn([\"data\", \"list\"])) {\n      currentTemp = this.props.redux.getIn([\n        \"data\",\n        \"list\",\n        \"0\",\n        \"main\",\n        \"temp\"\n      ]);\n    }\n    return (\n      <div>\n        <h1>Weather</h1>\n        <form onSubmit={this.fetchData}>\n          <label>\n            City, Country\n            <input\n              placeholder={\"City, Country\"}\n              type='text'\n              value={this.props.redux.get(\"location\")}\n              onChange={this.changeLocation}\n            />\n          </label>\n        </form>\n        {/*\n          Render the current temperature and the forecast if we have data\n          otherwise return null\n        */}\n\n        {/* Render the current temperature if no specific date is selected */}\n        {this.props.redux.getIn([\"data\", \"list\"]) ? (\n          <center className='plot'>\n            {/* Render the current temperature if no specific date is selected */}\n            {this.props.redux.getIn([\"selected\", \"temp\"]) ? (\n              <p>\n                The temperature on{\" \"}\n                {this.props.redux.getIn([\"selected\", \"date\"])} will be{\" \"}\n                {this.props.redux.getIn([\"selected\", \"temp\"])}°C\n              </p>\n            ) : (\n              <p>The current temperature is {currentTemp}°C!</p>\n            )}\n            <h2>Forecast</h2>\n            <Plot\n              data={[\n                {\n                  x: this.props.redux.get(\"dates\").toJS(),\n                  y: this.props.redux.get(\"temps\").toJS(),\n                  type: \"scatter\"\n                }\n              ]}\n              config={{ displayModeBar: false }}\n              onClick={this.onPlotClick}\n              layout={{\n                margin: {\n                  t: 0,\n                  r: 0,\n                  l: 30\n                },\n                xaxis: {\n                  gridcolor: \"transparent\"\n                }\n              }}\n            />\n          </center>\n        ) : null}\n      </div>\n    );\n  }\n}\n\n// Since we want to have the entire state anyway, we can simply return it as is!\nfunction mapStateToProps(state) {\n  return {\n    redux: state\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","import { fromJS } from \"immutable\";\n\nvar initialState = fromJS({\n  location: \"\",\n  data: {},\n  dates: [],\n  temps: [],\n  selected: {\n    date: \"\",\n    temp: null\n  }\n});\n\nexport default function mainReducer(state = initialState, action) {\n  switch (action.type) {\n    case \"CHANGE_LOCATION\":\n      return state.set(\"location\", action.location);\n    case \"SET_DATA\":\n      return state.set(\"data\", fromJS(action.data));\n    case \"SET_DATES\":\n      return state.set(\"dates\", fromJS(action.dates));\n    case \"SET_TEMPS\":\n      return state.set(\"temps\", fromJS(action.temps));\n    case \"SET_SELECTED_DATE\":\n      return state.setIn([\"selected\", \"date\"], action.date);\n    case \"SET_SELECTED_TEMP\":\n      return state.setIn([\"selected\", \"temp\"], action.temp);\n    default:\n      return state;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport mainReducer from \"./Store/reducers\";\nimport thunkMiddleware from \"redux-thunk\";\n\nvar store = createStore(mainReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}